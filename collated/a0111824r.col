//@author: a0111824r



	/**
	 * origin: .\src\UI\UIComponent.java
	 */

    /**
     * Update the title of the right panel (depreciated)
     * 
     * @param input the string to represent the title of the panel.
     */
	public void setFloatingTaskHeading(String title) {
		floatingTaskTitle.setText(title);
	}
	
	// End of segment: .\src\UI\UIComponent.java





	/**
	 * origin: .\src\UI\UIComponent.java
	 */

    /**
     * Update the title of the left panel (depreciated)
     * 
     * @param input the string to represent the title of the panel.
     */
	public void setReminderTaskHeading(String title) {
		reminderTaskTitle.setText(title);
	}
	
	// End of segment: .\src\UI\UIComponent.java





	/**
	 * origin: .\src\UI\UIComponent.java
	 */

    /**
     * Update the view for the right panel (depreciated)
     * 
     * @param input the arraylist of tasks to populate the listview.
     */
	public void updateTaskList(ArrayList<Task> items) {
	    floatingTaskListView.populateTaskListWithData(items);
	    floatingTaskListView.clearSelection();
	    
	    logger.log(Level.INFO, "Task ListView is updated.");
	}
	
	// End of segment: .\src\UI\UIComponent.java





	/**
	 * origin: .\src\UI\UIComponent.java
	 */

    /**
     * Update the view for the left panel (depreciated)
     * 
     * @param input the arraylist of tasks to be populated on the listview.
     */
	public void updateReminderList(ArrayList<Task> items) {
	    eventReminderTaskListView.populateTaskListWithData(items);
	    eventReminderTaskListView.clearSelection();    
		logger.log(Level.INFO, "Reminder & Event ListView is updated.");
	}
	
	// End of segment: .\src\UI\UIComponent.java





	/**
	 * origin: .\src\UI\UIComponent.java
	 */

    /**
     * Update both the title and the view of the left panel
     * 
     * @param input the arraylist of tasks to be populated on the listview
     *        input the String to replace the current title of the heading
     */
	public void updateLeftPanel(ArrayList<Task> items, String title) {
		reminderTaskTitle.setText(title);
	    eventReminderTaskListView.populateTaskListWithData(items);
	    eventReminderTaskListView.clearSelection();    
		logger.log(Level.INFO, "Reminder & Event ListView is updated.");
	}
	
	// End of segment: .\src\UI\UIComponent.java





	/**
	 * origin: .\src\UI\UIComponent.java
	 */

    /**
     * Update both the title and the view of the right panel
     * 
     * @param input the arraylist of tasks to be populated on the listview
     *        input the String to replace the current title of the heading
     */
	public void updateRightPanel(ArrayList<Task> items, String title) {
		floatingTaskTitle.setText(title);
		floatingTaskListView.populateTaskListWithData(items);
	    floatingTaskListView.clearSelection();
	    
	    logger.log(Level.INFO, "Task ListView is updated.");
	}
	
	public void setSuggestionText(String text) {
		suggestionText.setText(text);
	}
	
    public void showStage(Stage primaryStage) {
    	try {
    		primaryStage.setScene(this.getScene());
    		primaryStage.setResizable(false);
    		primaryStage.setTitle("WaveWave[0.4]");
    		primaryStage.show();
    		Controller.getTasks();
        	logger.log(Level.INFO, "UI has been successfully displayed.");
    	} catch (Exception ex) {
    		logger.log(Level.WARNING, "UI failed to initialize", ex);
    	}

    }
}

	// End of segment: .\src\UI\UIComponent.java





