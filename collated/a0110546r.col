//@author: a0110546r



	/**
	 * origin: .\src\application\Controller.java
	 */

    /**
     * Executes the command entered.
     * 
     * @param input The entire command input.
     */
    public static void runCommandInput(String input) {
        logger.log(Level.FINE, "runCommandInput(input: {0} )", input);

        CommandInfo commandInfo = null;
        
        // Ensures valid command input.
        try {
            commandInfo = (new Parser()).getCommandInfo(input);
        } catch (InvalidCommandException e) {
            uiComponent.setSuggestionText(e.getMessage());
            return;
        }
        assert(commandInfo != null);
        
        Message feedback = null;
        
        // Check for invalid IDs.
        ArrayList<String> invalidIDs = taskManager.getInvalidDisplayIDs(commandInfo.getTaskIDs());
        if (invalidIDs != null) {
            feedback = new MessageWarningInvalidID(invalidIDs);
            uiComponent.setSuggestionText(feedback.getMessage());
            logger.log(feedback.getMessage());
            return;
        }

        // Run the command.         
        switch (commandInfo.getCommandType()) {
            case InputCommands.ADD:
                taskManager.add(commandInfo);
                break;
            case InputCommands.DELETE:
                taskManager.delete(commandInfo);
                feedback = new MessageNotifyDelete(commandInfo.getTaskIDs());
                break;
            case InputCommands.EDIT:
                taskManager.edit(commandInfo);
                feedback = new MessageNotifyEdit(commandInfo.getTaskIDs().get(0));
                break;
            case InputCommands.UNDO:
                taskManager.undo(commandInfo, backup.getPastVersion());
                feedback = new MessageNotifyUndo();
                break;
            case InputCommands.COMPLETE:
                taskManager.complete(commandInfo);
                feedback = new MessageNotifyComplete(commandInfo.getTaskIDs());
                break;
            case InputCommands.HOME:
                break;
            case InputCommands.SHOW:
                taskManager.setDaysToDisplay(commandInfo, configManager);
                // continues:
            case InputCommands.SEARCH:
                taskManager.clearIDMapping();
                uiComponent.updateRightPanel(taskManager.getSearchedTasks(commandInfo), NAME_TODOS + " " + NAME_SEARCH_RESULTS);
                uiComponent.updateLeftPanel(taskManager.getSearchedEvents(commandInfo), NAME_EVENTS + " " + NAME_SEARCH_RESULTS);
                return;
            case InputCommands.QUIT:
            case InputCommands.EXIT:
                Platform.exit();
                return;
            	
        }
        
        taskManager.clearIDMapping();
        uiComponent.updateRightPanel(taskManager.getTasks(), NAME_TODOS);
        uiComponent.updateLeftPanel(taskManager.getEvents(), NAME_EVENTS);
        
        backup.storeBackup(taskManager.getFullList());
        dataStorage.saveTasks(taskManager.getSanitizedList());
        
        // Can only get display id after displaying.
        if ("add".equals(commandInfo.getCommandType())) {
            feedback = new MessageNotifyAdd(taskManager.getLastModifiedTask().getDisplayID());
        }
        
        if (feedback != null) {
            uiComponent.setSuggestionText(feedback.getMessage());
            logger.log(feedback.getMessage());
        }
    }
    

	// End of segment: .\src\application\Controller.java





	/**
	 * origin: .\src\application\Controller.java
	 */

    /**
     * For the UI to retrieve the list of tasks after it is initialized.
     */
    public static void getTasks() {
        uiComponent.updateRightPanel(taskManager.getTasks(), NAME_TODOS);
        uiComponent.updateLeftPanel(taskManager.getEvents(), NAME_EVENTS);
    }
    
	// End of segment: .\src\application\Controller.java





	/**
	 * origin: .\src\application\Controller.java
	 */

    /**
     * For the UI to retrieve the Task given the display ID.
     * @param displayID the displayID of the task.
     */
    public static Task getTaskFromDisplayID(String displayID) {
        try {
            return taskManager.getTaskFromDisplayID(displayID.toUpperCase());
        } catch (IllegalArgumentException e) {
            uiComponent.setSuggestionText(e.getMessage());
            // There is no need to log this.
        }
        return null;
    }
    
	// End of segment: .\src\application\Controller.java





	/**
	 * origin: .\src\application\Controller.java
	 */

    private static void setup() {
        dataStorage = new DataStorage();
        dataStorage.initiateFile();
        
        taskManager = new TaskManager();
        taskManager.initializeList(dataStorage.retrieveTasks());
        
        configManager = new ConfigManager();
        taskManager.setDaysToDisplay(configManager.getHomeViewType());
        
        backup = new Backup();
        backup.storeBackup(taskManager.getFullList());
        
        new DateTimeParser("start now"); // To reduce lag on adding the first event.
    }
    
	// End of segment: .\src\application\Controller.java





	/**
	 * origin: .\src\application\Controller.java
	 */

    public static void main(String[] args) {
        setup();
        launch(args);
    }

	// End of segment: .\src\application\Controller.java





	/**
	 * origin: .\src\application\Controller.java
	 */

    @Override
    public void start(Stage primaryStage) throws Exception {
        uiComponent = new UIComponent();
        primaryStage.getIcons().add(new Image("/UI/wavewave.png"));
        uiComponent.showStage(primaryStage);
    }
}

	// End of segment: .\src\application\Controller.java





	/**
	 * origin: .\src\application\WaveLogger.java
	 */

/**
 * Our custom logging class that wraps Logger.
 * Control loggers that output to the console by adding their
 * names into consoleOutput.txt.
 * 
	// End of segment: .\src\application\WaveLogger.java





	/**
	 * origin: .\src\task\ListDisplay.java
	 */

/**
 * The list display class.
	// End of segment: .\src\task\ListDisplay.java





	/**
	 * origin: .\src\task\Task.java
	 */

/**
 * The task object!
 * 
	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Constructor that creates a Task based on CommandInfo.
     * 
     * @param commandInfo the CommandInfo object that contains parsed information.
     */
    public Task(CommandInfo commandInfo) {
        this(); // Calls default constructor first.
        
        this.description = commandInfo.getTaskDesc();
        if (commandInfo.getStartDateTime() != null) {
            this.date = commandInfo.getStartDateTime();
        }
        if (commandInfo.getEndDateTime() != null) {
            this.endDate = commandInfo.getEndDateTime();
        }
        if (commandInfo.getPriority() != 0) {
            this.priority = commandInfo.getPriority();
        }
    }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Constructor that edits an existing Task based on CommandInfo and assigns the same id.
     * 
     * @param commandInfo the CommandInfo object that contains parsed information.
     * @param id an existing Task id.
     */
    public Task(CommandInfo commandInfo, int id) {
        this(commandInfo); // Calls commandInfo constructor first.
        this.id = id;
        Task.idCounter--; // Because we are editing, so do not increment the counter.
    }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Public default constructor.
     */
    public Task() {
        this.id = Task.idCounter++;
        this.createdAt = new DateTime();
        this.modifiedAt = new DateTime();
    }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Returns the id of the Task.
     * 
     * @return the id of the Task.
     */
    public int getID() { return this.id; }


	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Returns the description of the Task.
     * 
     * @return the description of the Task.
     */
    public String getDescription() { return this.description; }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Sets the description of the Task.
     * 
     * @param description overwrites the description of the Task.
     */
    public void setDescription(String description) {
        this.description = description;
        this.modifiedAt = new DateTime();
    }    

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Returns the displayID of the Task.
     * 
     * @return the displayID of the Task.
     */
    public String getDisplayID() { return this.displayID; }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Sets the displayID of the Task.
     * 
     * @param description overwrites the displayID of the Task.
     */
    public void setDisplayID(String displayID) {
        this.displayID = displayID;
        // this.modifiedAt = new DateTime(); // This does not modify the task. 
    }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Returns the (start) date of the Task. Returns null if there is no date.
     * 
     * @return the (start) date of the Task. Returns null if there is no date.
     */
    public DateTime getDate() { return this.date; }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Sets the (start) date of the Task. Set as null to remove the date.
     * 
     * @param date sets the (start) date of the Task.
     *     Set to null to remove the date.
     */
    public void setDate(DateTime date) {
        // We should probably set endDate to null if date is null.
        this.date = date;
        this.modifiedAt = new DateTime();
    }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Returns the end date of the Task. Returns null if there is no end date.
     * 
     * @return the end date of the Task. Returns null if there is no end date.
     */
    public DateTime getEndDate() { return this.endDate; }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Sets the end date of the Task. Set as null to remove the date.
     * 
     * @param endDate sets the end date of the Task. Set to null to remove the date.
     */
    public void setEndDate(DateTime endDate) {
        this.endDate = endDate;
        this.modifiedAt = new DateTime();
    }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Returns whether Task is completed.
     * 
     * @return boolean whether Task is completed.
     */
    public boolean isCompleted() { return completed; }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Sets the completed status of the Task.
     * 
     * @param completed overwrites the completed status of the Task.
     */
    public void setCompleted(boolean completed) {
        this.completed = completed;
        this.modifiedAt = new DateTime();
        if (completed) {
            this.completedAt = new DateTime(this.modifiedAt);
        }
        else {
            this.completedAt = null;
        }
    }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Completes the task.
     */
    public void complete() { this.setCompleted(true); }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Returns the priority of the Task.
     * 
     * @return int priority of the Task.
     */
    public int getPriority() { return this.priority; }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Sets the priority of the Task.
     * 
     * @param priority overwrites the priority of the Task.
     */
    public void setPriority(int priority) {
        // Check if priority is negative.
        if (priority > 0) { priority = 1; }
        else { priority = 0; }
        this.priority = priority;
        this.modifiedAt = new DateTime();
    }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Returns the created date of the Task.
     * 
     * @return the created date of the Task.
     */
    public DateTime getCreatedAt() { return this.createdAt; }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Sets the created date of the Task.
     * Used only when retrieving tasks list from external file.
     * 
     * @param createdDate the created DateTime of the Task.
     */
    public void setCreatedAt(DateTime createdDate) {
        this.createdAt = createdDate;
    }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Returns the last modified date of the Task.
     * 
     * @return the last modified date of the Task.
     */
    public DateTime getModifiedAt() { return this.modifiedAt; }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Sets the last modified date of the Task. 
     * Used only when retrieving tasks list from external file.
     * 
     * @param modifiedDate the last modified DateTime of the Task.
     */
    public void setModifiedAt(DateTime modifiedDate) {
        this.modifiedAt = modifiedDate;
    }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Returns the completed date of the Task.
     * 
     * @return the completed date of the Task.
     */
    public DateTime getCompletedAt() { return this.completedAt; }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Sets the completed date of the Task.
     * Used only when retrieving tasks list from external file.
     * 
     * @param completedDate the completed DateTime of the Task.
     */
    public void setCompletedAt(DateTime completedDate) {
        this.completedAt = completedDate;
    }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Returns whether this task is deleted.
     * 
     * @return whether this task is deleted.
     */
    public boolean isDeleted() { return this.deleted; }

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Sets whether the Task is deleted.
     * @param deleted boolean whether to delete the Task.
     */
    public void setDeleted(boolean deleted) { this.deleted = deleted; }   
    

	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Used to reset the internal ID counter back to 0.
     */
    public static void resetIDCounter() { resetIDCounter(0); }
    
	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\Task.java
	 */

    /**
     * Used to set the internal ID counter.
     * @param count the number to set to.
     */
    public static void resetIDCounter(int count) {
        assert(count >= 0);
        idCounter = count;
    }
}


	// End of segment: .\src\task\Task.java





	/**
	 * origin: .\src\task\TaskComparators.java
	 */

/**
 * The comparator class used to sort Tasks by their date.
 * 
	// End of segment: .\src\task\TaskComparators.java





	/**
	 * origin: .\src\task\TaskComparators.java
	 */

/**
 * The comparator class used to sort Tasks by their end date.
	// End of segment: .\src\task\TaskComparators.java





	/**
	 * origin: .\src\task\TaskComparators.java
	 */

/**
 * The comparator class used to sort Tasks by their completed at date.
	// End of segment: .\src\task\TaskComparators.java





	/**
	 * origin: .\src\task\TaskComparators.java
	 */

/**
 * The comparator class used to sort Tasks by their created at date.
 * 
	// End of segment: .\src\task\TaskComparators.java





	/**
	 * origin: .\src\task\TaskComparators.java
	 */

/**
 * The comparator class used to sort Tasks by their priority.
 * 
	// End of segment: .\src\task\TaskComparators.java





	/**
	 * origin: .\src\task\TaskComparators.java
	 */

/**
 * The comparator class used to sort Tasks by days and within each day, by priority.
 * 
	// End of segment: .\src\task\TaskComparators.java





	/**
	 * origin: .\src\task\TaskListFilter.java
	 */

interface TaskFilter {
    public boolean apply(Task t);
}

/**
 * Filter to keep completed tasks in the list. 
	// End of segment: .\src\task\TaskListFilter.java





	/**
	 * origin: .\src\task\TaskManager.java
	 */

/**
 * The manager that manipulates and contains the array list of Tasks.
 * 
	// End of segment: .\src\task\TaskManager.java





	/**
	 * origin: .\test\application\IntegrationTest.java
	 */

/**
 * This class is used to reflect all the private static fields and methods of the Controller class.
	// End of segment: .\test\application\IntegrationTest.java





	/**
	 * origin: .\test\application\IntegrationTest.java
	 */

/**
 * Mocks the UIComponent class.
	// End of segment: .\test\application\IntegrationTest.java





	/**
	 * origin: .\test\application\IntegrationTest.java
	 */

    // This is used to set up integration testing.
    // This method will always run once before the tests begin.
    @BeforeClass
    public static void initializeIntegrationTest() throws Exception {
        try {
            ControllerReflector.reflect();
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        // Runs the setup methods to initialize other components.
        ControllerReflector.methods.get("setup").invoke(null, EMPTY);
        
        // Resets the ArrayList of Tasks to empty.
        ArrayList<Task> emptyTasks = new ArrayList<Task>();
        taskManager.initializeList(emptyTasks);
        taskManager.clearIDMapping();
        dataStorage.saveTasks(emptyTasks);
        taskManager.setDaysToDisplay(3);
        
        
        // Replaces the two static fields with our own stubs.
        ControllerReflector.fields.get("taskManager").set(null, taskManager);
        ControllerReflector.fields.get("dataStorage").set(null, dataStorage);
        
        // Run the JavaFX thread in the background.
        Thread t = new Thread("JavaFX Background") {
            @Override
            public void run() {
                launch(IntegrationTest.class);
            }
        };
        t.setDaemon(true);
        t.start();
        
        // Sleeps every half second until uiComponent is set and ready for use.
        int i = 0;
        while (uiComponent == null && i < 6) {
            i++;
            Thread.sleep(500);
        }
    }

	// End of segment: .\test\application\IntegrationTest.java





	/**
	 * origin: .\test\application\IntegrationTest.java
	 */

    // Method to start JavaFX stage during tests.
    @Override
    public void start(Stage primaryStage) throws Exception {
        ControllerReflector.fields.get("uiComponent").set(null, new UIComponent());
        uiComponent = (UIComponent) ControllerReflector.fields.get("uiComponent").get(null);
    }

	// End of segment: .\test\application\IntegrationTest.java





	/**
	 * origin: .\test\application\IntegrationTest.java
	 */

    // This method will be run once before each test.
    @Before
    public void readyTasks() {
		inputBox = new UICmdInputBox(new Text(), new Text(), uiComponent);
		acListener = new UIAutoCompleteListener(inputBox);
		autocomplete = new UIAutoComplete(inputBox, acListener);
		
        DataStorage fixtureStorage = new DataStorage(SAMPLE_TEST_JSON_FILENAME);
        ArrayList<Task> fixtures = fixtureStorage.retrieveTasks();
        taskManager.initializeList(fixtures);
        dataStorage.saveTasks(fixtures);    

        FIXTURES_SIZE = fixtures.size();
        TASKS_SIZE = 3; // Default view to the day itself.
        EVENTS_SIZE = 0; // Default view to the day itself.

        taskManager.setDaysToDisplay(3);
        
        // The following lines readies the hashtable.
        taskManager.clearIDMapping();
        taskManager.getTasks();
        taskManager.getEvents();
        
        /**
         * The fixture contains:
         * ****
         * 
         * Left pane:     
         *   E1: CS2103T Final Exam
         *     !, 26th Nov Wed 13:00 to Wed 15:00
         *     
         *   E2: Christmas shopping
         *     23rd Dec Tues 10:00 to 17:00
         *     
         *   E3: Doctor's appointment
         *     23rd Dec Tues 9:00
         *     
         *   E4: New Year Countdown
         *     31st Dec Wed 22:00
         *     
         * Right pane:
         *   T1: Lucky draw application
         *     by 17th Dec Wed 12:55
         *   T2: Top up ezlink !
         *   T3: Learn new language
         *   T4: Buy new sweater
         *
         */
    }

	// End of segment: .\test\application\IntegrationTest.java





	/**
	 * origin: .\test\application\IntegrationTest.java
	 */

    // This method will be run once after each test.
    @After
    public void clearTasks() {
        // Resets the ArrayList of Tasks to empty.
        ArrayList<Task> emptyTasks = new ArrayList<Task>();
        taskManager.initializeList(emptyTasks);
        dataStorage.saveTasks(emptyTasks);
    }

	// End of segment: .\test\application\IntegrationTest.java





	/**
	 * origin: .\test\application\IntegrationTest.java
	 */

    @Test
    public void testAdd() {
        String commandInput = "add [first wavewave]";
        Controller.runCommandInput(commandInput);
        
        DataStorage checkStorage = new DataStorage(TODO_TEST_JSON_FILENAME);
        
        assertEquals(FIXTURES_SIZE + 1, checkStorage.retrieveTasks().size());
        assertEquals(FIXTURES_SIZE + 1, taskManager.getSanitizedList().size());
        assertEquals(TASKS_SIZE + 1, taskManager.getTasks().size());
        assertEquals(EVENTS_SIZE, taskManager.getEvents().size());
    }

	// End of segment: .\test\application\IntegrationTest.java





	/**
	 * origin: .\test\application\IntegrationTest.java
	 */

    @Test
    public void testAddEmpty() {
        String commandInput = "add []";
        Controller.runCommandInput(commandInput);
        
         assertEquals(FIXTURES_SIZE, taskManager.getSanitizedList().size());
    }

	// End of segment: .\test\application\IntegrationTest.java





	/**
	 * origin: .\test\application\IntegrationTest.java
	 */

    @Test
    public void testCompleteTask() {
        Controller.runCommandInput("show"); // So that all tasks will be shown.
        String commandInput = "complete T2";
        Controller.runCommandInput(commandInput);
        
        assertEquals(TASKS_SIZE, taskManager.getTasks().size());
    }
    
	// End of segment: .\test\application\IntegrationTest.java





	/**
	 * origin: .\test\application\IntegrationTest.java
	 */

    @Test
    public void testDeleteTask() {
        String commandInput = "delete T1";
        Controller.runCommandInput(commandInput);
        
        DataStorage checkStorage = new DataStorage(TODO_TEST_JSON_FILENAME);
        
        assertEquals(FIXTURES_SIZE - 1, checkStorage.retrieveTasks().size());        
        assertEquals(FIXTURES_SIZE - 1, taskManager.getSanitizedList().size());        
    }
    
	// End of segment: .\test\application\IntegrationTest.java





	/**
	 * origin: .\test\task\TaskComparatorTest.java
	 */

public class TaskComparatorTest {

   ArrayList<Task> tasks;
   Task a, b;
   
    @Before
    public void setUp() throws Exception {
        tasks = new ArrayList<Task>();
        a = new Task();
        b = new Task();
        
        tasks.add(a);
        tasks.add(b);
        
        // a comes before b at the moment.
    }

    @After
    public void tearDown() throws Exception {
    }
    
    @Test
    public void testOrderInArrayList() {
        assertEquals("a is in front", a, tasks.get(0));
        assertEquals("b is behind", b, tasks.get(1));
    }

    /**
     * Tests that the start date comparator works as it should.
     */
    @Test
    public void testStartDateComparator() {
        DateTime date = new DateTime(2014, 10, 30, 12, 44, 0); // 30 October 2014, 12:44:00
        a.setDate(date);
        date = date.minusDays(1);
        b.setDate(date);
        
        Collections.sort(tasks, new DateComparator());
        
        assertEquals("b is now in front", b, tasks.get(0));
        assertEquals("a is now behind", a, tasks.get(1));
    }
    
    /**
     * Tests that the end date comparator works as it should. 
     */
    @Test
    public void testEndDateComparator() {
        DateTime date = new DateTime(2014, 10, 30, 12, 44, 0); // 30 October 2014, 12:44:00
        a.setDate(date);
        b.setDate(date);

        date = date.plusDays(3);
        a.setEndDate(date);
        date = date.minusDays(1);
        b.setEndDate(date);
        
        Collections.sort(tasks, new DateComparator());

        assertEquals("a is now behind", a, tasks.get(1));
        assertEquals("b is now in front", b, tasks.get(0));
    }
    
    /**
     * Tests that the priority comparator works as it should.
     */
    @Test
    public void testPriorityComparator() {
        a.setPriority(0);
        b.setPriority(1);
        
        Collections.sort(tasks, new PriorityComparator());
        
        assertEquals("b is now in front", b, tasks.get(0));
        assertEquals("a is now behind", a, tasks.get(1));        
    }
    
    /**
     * Tests that the modified at comparator works as it should.
     */
    @Test
    public void testModifiedAtComparator() {
        try {
            Thread.sleep(100); // So that modified at time is significantly different.
        } catch (Exception e) {}
        
        b.setPriority(0); // So that b is "updated".
        
        Collections.sort(tasks, new ModifiedAtComparator());
        
        assertEquals("b is now in front", b, tasks.get(0));
        assertEquals("a is now behind", a, tasks.get(1));        
    }

}

	// End of segment: .\test\task\TaskComparatorTest.java





	/**
	 * origin: .\test\task\TaskTest.java
	 */

/**
	// End of segment: .\test\task\TaskTest.java





